trigger:
  branches:
    include:
    - master

pool:
 name: self-hosted
 demands:
  - Agent.Name -equals rho

parameters:
- name: environmentName
  displayName: 'Environment to deploy to'
  type: string
  default: 'dev'
  values:
  - dev
  - stage
  - prod

variables:
- group: dynamo-danger-zone-${{ parameters.environmentName }}-vg

stages:
- stage: Validate
  jobs:
  - job: ValidateBicep
    steps:
    - task: AzureCLI@2
      inputs:
        azureSubscription: 'dynamo-danger-zone-resource-service-connection'
        scriptType: 'bash'
        scriptLocation: 'inlineScript'
        inlineScript: |
          az deployment sub what-if \
            --location germanywestcentral \
            --template-file bicep/infra/main.bicep \
            --parameters @bicep/infra/parameters.${{ parameters.environmentName }}.json

- stage: deploy_infra
  jobs:
  - deployment: DeployInfrastructure
    environment: dev
    strategy:
      runOnce:
        deploy:
          steps:
          - task: AzureCLI@2
            name: InfraDeployment  # Named step for output reference
            inputs:
              azureSubscription: 'dynamo-danger-zone-resource-service-connection'
              scriptType: 'bash'
              scriptLocation: 'inlineScript'
              inlineScript: |
                # Deploy infrastructure
                az deployment sub create \
                  --location germanywestcentral \
                  --template-file bicep/infra/main.bicep \
                  --parameters @bicep/infra/parameters.${{ parameters.environmentName }}.json \
                  --name infra-deployment-${{ parameters.environmentName }}

                echo "Fetching deployment outputs..."
                outputs=$(az deployment sub show \
                  --name infra-deployment-${{ parameters.environmentName }} \
                  --output json \
                  --query "properties.outputs")

                backendAppName=$(echo $outputs | jq -r .backendAppName.value)
                frontendAppName=$(echo $outputs | jq -r .frontendAppName.value)
                backendWebAppUri=$(echo $outputs | jq -r .backendWebAppUri.value)

                # debug output
                echo "Backend App Name: $backendAppName"
                echo "Frontend App Name: $frontendAppName"
                echo "Backend Web App URI: $backendWebAppUri"

                # Store them in pipeline variables for use in subsequent steps
                echo "##vso[task.setvariable variable=BACKEND_WEBAPP_NAME;]$backendAppName"
                echo "##vso[task.setvariable variable=FRONTEND_WEBAPP_NAME;]$frontendAppName"
                echo "##vso[task.setvariable variable=BACKEND_WEBAPP_URI;]$backendWebAppUri"

                echo "Deployment completed."

          - task: AzureCLI@2
            displayName: 'Store outputs in a Variable Group'
            env:
              AZURE_DEVOPS_EXT_PAT: $(System.AccessToken)
            inputs:
              azureSubscription: 'dynamo-danger-zone-resource-service-connection'
              scriptType: 'bash'
              scriptLocation: 'inlineScript'
              inlineScript: |
                # Install the Azure DevOps extension if not present
                az extension add --name azure-devops || true

                az devops configure --defaults organization=$(System.CollectionUri) project=$(System.TeamProject)

                groupName="dynamo-danger-zone-${{ parameters.environmentName }}-vg"
                echo "Creating/updating variable group: $groupName"

                existingGroup=$(az pipelines variable-group list --query "[?name=='$groupName'].name" -o tsv)

                if [ "$existingGroup" == "$groupName" ]; then
                  echo "Variable group '$groupName' exists, updating variables..."
                  # get group id
                  existingGroupId=$(az pipelines variable-group list --query "[?name=='$groupName'].id" -o tsv)

                  # Define variables and create/update each
                  declare -A variables=(
                    ["BACKEND_WEBAPP_NAME"]="$(BACKEND_WEBAPP_NAME)"
                    ["FRONTEND_WEBAPP_NAME"]="$(FRONTEND_WEBAPP_NAME)"
                    ["BACKEND_WEBAPP_URI"]="$(BACKEND_WEBAPP_URI)"
                  )

                  for varName in "${!variables[@]}"; do
                    varValue=${variables[$varName]}
                    existingVar=$(az pipelines variable-group variable list --group-id $existingGroupId --query "[$varName]" -o tsv)

                    if [ "$existingVar" == "None" ]; then
                      echo "Variable '$varName' not found; creating..."
                      az pipelines variable-group variable create --group-id $existingGroupId --name $varName --value $varValue --secret false
                    else
                      echo "Variable '$varName' exists; updating..."
                      az pipelines variable-group variable update --group-id $existingGroupId --name $varName --value $varValue --secret false
                    fi
                  done
                else
                  echo "Variable group '$groupName' not found; creating..."
                  az pipelines variable-group create \
                    --name $groupName \
                    --authorize true \
                    --variables \
                      BACKEND_WEBAPP_NAME=$(BACKEND_WEBAPP_NAME) \
                      FRONTEND_WEBAPP_NAME=$(FRONTEND_WEBAPP_NAME) \
                      BACKEND_WEBAPP_URI=$(BACKEND_WEBAPP_URI)
                fi

                echo "Variable group '$groupName' has been updated with latest infrastructure outputs."

- stage: deploy_backend
  jobs:
  - deployment: DeployApp
    environment: ${{ parameters.environmentName }}
    strategy:
      runOnce:
        deploy:
          steps:
          - checkout: self
          - task: NodeTool@0
            inputs:
              versionSpec: '20.x'

          - task: AzureWebApp@1
            inputs:
              azureSubscription: 'dynamo-danger-zone-resource-service-connection'
              appName: $(BACKEND_WEBAPP_NAME)
              package: '$(Build.SourcesDirectory)/backend'
              deploymentMethod: 'zipDeploy'

- stage: deploy_frontend
  jobs:
  - deployment: DeployFrontend
    environment: ${{ parameters.environmentName }}
    strategy:
      runOnce:
        deploy:
          steps:
          - checkout: self

          - task: NodeTool@0
            inputs:
              versionSpec: '20.x'

          - script: npm install
            displayName: 'Install Dependencies'
            workingDirectory: 'frontend'

          - script: echo $VITE_BACKEND_API_URL
            displayName: 'Print Backend API URL'
            env:
              VITE_BACKEND_API_URL: $(BACKEND_WEBAPP_URI)

          - script: npm run build
            displayName: 'Build Frontend'
            workingDirectory: 'frontend'
            env:
              VITE_BACKEND_API_URL: $(BACKEND_WEBAPP_URI)

          - task: AzureWebApp@1
            inputs:
              azureSubscription: 'dynamo-danger-zone-resource-service-connection'
              appName: $(FRONTEND_WEBAPP_NAME)
              package: '$(Build.SourcesDirectory)/frontend/dist'
              deploymentMethod: 'zipDeploy'
